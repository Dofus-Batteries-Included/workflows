name: Create release on game update

on:
  workflow_call:
    inputs:
      archive_name:
        type: string
        required: true
        description: The name of the archive containing the metadata.json file
      metadata_path:
        type: string
        description: The path to the metadata.json file in the archive
        default: metadata.json
  workflow_dispatch:

jobs:
  job:
    name: Create release on game update
    runs-on: windows-latest
    concurrency: poll_game_update
    
    steps:
      - name: Fetch last release
        id: fetch_last_release
        uses: octokit/request-action@v2.x
        with:
          route: GET /repos/{repository}/releases/latest
          repository: ${{ github.repository }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Read version from metadata file of last release
        id: fetch_last_release_version
        run: |
          $ResponseString=@'
          ${{ steps.fetch_last_release.outputs.data }}
          '@
          $Response=$ResponseString | ConvertFrom-Json
          $AssetsNamedRelease=$Response.assets | Where-Object {$_.name -eq "${{ inputs.archive_name }}"}
          
          if ($AssetsNamedRelease.Count -eq 0) {
            Write-Output "::error::Could not find release archive in last release: ${{ inputs.archive_name }} not found." 
            exit 1
          }
          
          $ReleaseAsset=$AssetsNamedRelease[0]
          $Url=$ReleaseAsset.browser_download_url
          echo "Asset file: $Url"
          $null=Invoke-WebRequest -Uri "$Url" -OutFile ${{ inputs.archive_name }}
          $null=7z x ${{ inputs.archive_name }} -orelease
          
          if (!(Test-Path 'release/${{ inputs.metadata_path }}')) {
            Write-Output "::error::Could not find metadata file in last release: metadata.json not found in ${{ inputs.archive_name }}."
            exit 1
          }
          
          $Metadata=(Get-Content 'release/${{ inputs.metadata_path }}' | Out-String | ConvertFrom-Json)
          echo "Last release version: $($Metadata.GameVersion)." >> $Env:GITHUB_STEP_SUMMARY
          echo "version=$($Metadata.GameVersion)" >> $Env:GITHUB_OUTPUT
          echo "last_release_name=$($Response.tag_name)" >> $Env:GITHUB_OUTPUT

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: latest

      - name: Setup Github NPM registry for @dofus-batteries-included namespace
        run: |
          echo @dofus-batteries-included:registry=https://npm.pkg.github.com > ~/.npmrc
          echo //npm.pkg.github.com/:_authToken=${{ secrets.GITHUB_TOKEN }} >> ~/.npmrc

      - name: Install Cytrus v6
        run: npm i @dofus-batteries-included/cytrus-v6 -g

      - name: Read current game version
        id: fetch_dofus_version
        run: |
          $CytrusGameVersion=$(cytrus-v6 version -g dofus -b)
          $Version=$CytrusGameVersion.Split("_")[1]
          echo "Current game version: $Version." >> $Env:GITHUB_STEP_SUMMARY
          echo "dofus_version=$Version" >> $Env:GITHUB_OUTPUT

      - name: Write job summary
        id: should_continue
        run: |
          $ReleaseVersion="${{ steps.fetch_last_release_version.outputs.version }}"
          $GameVersion="${{ steps.fetch_dofus_version.outputs.dofus_version }}"
          
          if ($ReleaseVersion -eq $GameVersion) {
            echo "Versions match, no release will be created." >> $Env:GITHUB_STEP_SUMMARY
          } else {
            echo "Versions match, no release will be created." >> $Env:GITHUB_STEP_SUMMARY
            echo "A new release will be created automatically." >> $Env:GITHUB_STEP_SUMMARY
            echo "create_release=true" >> $Env:GITHUB_OUTPUT
          }

      - name: Stop when versions match
        if: ${{ steps.fetch_last_release_version.outputs.version == steps.fetch_dofus_version.outputs.dofus_version }}
        uses: octokit/request-action@v2.x
        with:
          route: POST /repos/{repository}/actions/runs/{run_id}/cancel
          repository: ${{ github.repository }}
          run_id: ${{ github.run_id }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Wait for workflow cancellation
        if: ${{ steps.fetch_last_release_version.outputs.version == steps.fetch_dofus_version.outputs.dofus_version }}
        run: |
          while ($True) { echo "Waiting for job to be cancelled"; sleep 5; }

      - name: Checkout
        if: ${{ steps.should_continue.outputs.create_release }}
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get latest tag
        id: fetch_latest_tag
        if: ${{ steps.should_continue.outputs.create_release }}
        uses: WyriHaximus/github-action-get-previous-tag@v1

      - name: Bump version
        id: bump_version
        if: ${{ steps.should_continue.outputs.create_release }}
        run: |
          $Version="${{ steps.fetch_latest_tag.outputs.tag }}"
          $Regex="v(?<major>[0-9]+)\.(?<minor>[0-9]+)\.(?<patch>[0-9]+)(?<prerelease>-.*)?"
          if ($Version -notmatch $Regex) {
            throw "$Version is not a valid version number"
          }
          $Major=[Convert]::ToInt32($matches["major"])
          $Minor=[Convert]::ToInt32($matches["minor"])
          $Patch=[Convert]::ToInt32($matches["patch"])
          $Prerelease=$matches["prerelease"]
          
          echo "Found version: v$Major.$Minor.$Patch$Prerelease"
          
          $NewPatch=$Patch+1
          $BumpedVersion="v$Major.$Minor.$NewPatch$Prerelease"
          
          echo "Bumped version: $BumpedVersion"
          echo "new_version=$BumpedVersion" >> $Env:GITHUB_OUTPUT

      - name: Get last commit
        uses: octokit/request-action@v2.x
        id: fetch_last_commit
        if: ${{ steps.should_continue.outputs.create_release }}
        with:
          route: GET /repos/{repository}/commits
          repository: ${{ github.repository }}
          per_page: 1
          page: 1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Get last commit ref
        id: fetch_last_commit_ref
        if: ${{ steps.should_continue.outputs.create_release }}
        run: |
          $ResponseString=@'
          ${{ steps.fetch_last_commit.outputs.data }}
          '@
          $Response=($ResponseString | ConvertFrom-Json)
          echo "Last commit: $($Response.Sha)"
          echo "ref=$($Response.Sha)" >> $Env:GITHUB_OUTPUT

      - name: Generate release notes
        uses: octokit/request-action@v2.x
        id: create_release_notes
        if: ${{ steps.should_continue.outputs.create_release }}
        with:
          route: POST /repos/{repository}/releases/generate-notes
          repository: ${{ github.repository }}
          previous_tag_name: ${{ steps.fetch_last_release_version.outputs.last_release_name }}
          tag_name: ${{ steps.bump_version.outputs.new_version }}
          target_commitish: ${{ steps.fetch_last_commit_ref.outputs.ref }}
        env:
          GITHUB_TOKEN: ${{ secrets.ACTIONS_PAT }}

      - name: Create release
        uses: octokit/request-action@v2.x
        id: create_release
        if: ${{ steps.should_continue.outputs.create_release }}
        with:
          route: POST /repos/{repository}/releases
          repository: ${{ github.repository }}
          tag_name: ${{ steps.bump_version.outputs.new_version }}
          target_commitish: ${{ steps.fetch_last_commit_ref.outputs.ref }}
          name: ${{ steps.bump_version.outputs.new_version }}
          body: |
            AUTO-GENERATED: This release has been triggered by the update of the game to version ${{ steps.fetch_dofus_version.outputs.dofus_version }}.
            
            ${{ fromJSON(steps.create_release_notes.outputs.data).body }}
        env:
          GITHUB_TOKEN: ${{ secrets.ACTIONS_PAT }}

      - name: Add to job summary
        run: echo "The ${{ steps.bump_version.outputs.new_version }} release has been created." >> $Env:GITHUB_STEP_SUMMARY

permissions:
  actions: write
  contents: write
  packages: read
